!<arch>
0-isupper.c/    0           0     0     644     226       `
#include "main.h"

/**
 * _isupper - check if c is uppercase
 * @c:input for alphabet
 * Return: Returns 1 if c is uppercase , 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     261       `
#include "main.h"

/**
 * *_memset - function
 * @s: pointer
 * @n: the num of byte to fill
 * @b: constant byte
 * Return: pointer
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     330       `
#include "main.h"
#include <string.h>

/**
 *_strcat - concatenates two strings
 * @dest: string
 * @src: string
 * Return: 0
 */

char *_strcat(char *dest, char *src)
{
	int i = 0;
	int j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
dest[i] = '\0';
return (dest);
}
100-atoi.c/     0           0     0     644     374       `
#include "main.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

/**
 * _atoi - function
 * @s: string
 * Return: atoi
 */
int _atoi(char *s)
{
	unsigned int num = 0;
	int sign = 1;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');
		else if (num > 0)
			break;
	} while (*s++);
	return (num * sign);
}
1-isdigit.c/    0           0     0     644     195       `
#include "main.h"

/**
 * _isdigit - check for digit
 * @c: input
 * Return: 1 if c is digit, 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     292       `
#include "main.h"
/**
 * *_memcpy - function
 * @dest: where to copy the memory to
 * @src: where to copy from
 * @n: num of bute
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     331       `
#include "main.h"
/**
 * *_strncat - function
 * @dest: string
 * @src: string
 * @n: input
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     237       `
#include "main.h"
/**
 * *_strchr - function
 * @s: string
 * @c: char
 * Return: pointer
 */
char *_strchr(char *s, char c)
{
	while (*s)
	{
		if (*s != c)
			s++;
		else
			return (s);
	}
	if (c == '\0')
		return (s);
return (NULL);
}

2-strlen.c/     0           0     0     644     164       `
#include "main.h"
#include <string.h>

/**
 * _strlen - function
 * @s: string
 * Return: length
 */
int _strlen(char *s)
{
	int len = strlen(s);

	return (len);
}
2-strncpy.c/    0           0     0     644     303       `
#include "main.h"

/**
 * *_strncpy - function
 * @dest: string
 * @src: string
 * @n: input
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	while (i < n && src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     208       `
#include "main.h"
#include <ctype.h>
/**
 * _islower - Entry point
 * @c: character in
 * Return: 1 if c is lowercase , 0 if not
 */
int _islower(int c)
{
	if (islower(c))
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     194       `
#include "main.h"
#include <string.h>

/**
 * _puts - function
 * @str: string
 * Return: 0
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     261       `
#include "main.h"
/**
 * _strcmp - function
 * @s1: input
 * @s2: input
 * Return: 0
 */
int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     366       `
#include "main.h"
/**
 * _strspn - function
 * @s: string
 * @accept: number
 * Return: the num of bytes
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j;
	int c = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] != 32)
		{
			for (j = 0; accept[j] != '\0'; j++)
			{
				if (s[i] == accept[j])
					c++;
			}
		}
		else
			return (c);
	}
	return (c);
}
4-isalpha.c/    0           0     0     644     207       `
#include "main.h"
#include <ctype.h>
/**
 * _isalpha - Entry point
 * @c: character in
 * Return: 1 if c is a letter , 0 if not
 */
int _isalpha(int c)
{
	if (isalpha(c))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     280       `
#include "main.h"
/**
 * *_strpbrk - function
 * @s: string
 * @accept: number
 * Return: number of bytes
 */
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
				return (s);
		}
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     357       `
#include "main.h"
/**
 * *_strstr - function
 * @needle: substring
 * @haystack: string
 * Return: pointer
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}
		if (*p == '\0')
			return (haystack);
	}
	return (0);
}

6-abs.c/        0           0     0     644     165       `
#include "main.h"
#include <stdlib.h>
/**
 * _abs -  computes the absolute value of an integer
 * @n: integer
 * Return: 0
 */
int _abs(int n)
{
	return (abs(n));
}

9-strcpy.c/     0           0     0     644     211       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * *_strcpy - function
 * @dest: string
 * @src: string
 * Return: to dest
 */
char *_strcpy(char *dest, char *src)
{
	return (strcpy(dest, src));
}

_putchar.c/     0           0     0     644     130       `
#include <unistd.h>

/**
 * _putchar - check the code
 *
 * Return: int.
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}
